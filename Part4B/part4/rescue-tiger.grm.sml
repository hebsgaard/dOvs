functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
structure A = Absyn
structure S = Symbol

datatype lvaluePartSpec = Field of S.symbol
                        | Subscript of A.exp

fun makeLvaluePartSpec (v, pos, l::r) =
  (case l of
       Field idsym => 
       makeLvaluePartSpec (A.FieldVar (v, idsym, pos), pos, r)
     | Subscript exp => 
       makeLvaluePartSpec (A.SubscriptVar (v, exp, pos), pos,r))
  | makeLvaluePartSpec (v, _, nil) = v

fun makeBinop (e1, bop, e2, p) = A.OpExp { left = e1
                                         , oper = bop
                                         , right = e2
                                         , pos = p}
                                
fun makeIf (et, en, el, p) = A.IfExp { test = et
                                     , thn = en
                                     , els = el
                                     , pos = p}

fun makeVarDec (idsym, ty, e, p) = A.VarDec { name = idsym
                                            , escape = ref true
                                            , typ = ty
                                            , init = e
                                            , pos = p}

fun makeFundecl (idsym, ps, rty, e, p) = { name = idsym
                                         , params = ps
                                         , result = rty
                                         , body = e
                                         , pos = p} : A.fundecldata

fun makeSeqExp [(exp, pos)] = exp
  | makeSeqExp exps = A.SeqExp exps


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\197\000\005\000\197\000\007\000\197\000\009\000\197\000\
\\011\000\197\000\013\000\197\000\015\000\037\000\016\000\036\000\
\\017\000\035\000\018\000\034\000\025\000\197\000\026\000\197\000\
\\030\000\197\000\031\000\197\000\034\000\197\000\035\000\197\000\
\\037\000\197\000\038\000\197\000\042\000\197\000\043\000\197\000\
\\044\000\197\000\000\000\
\\001\000\001\000\198\000\005\000\198\000\007\000\198\000\009\000\198\000\
\\011\000\198\000\013\000\198\000\015\000\037\000\016\000\036\000\
\\017\000\035\000\018\000\034\000\025\000\198\000\026\000\198\000\
\\030\000\198\000\031\000\198\000\034\000\198\000\035\000\198\000\
\\037\000\198\000\038\000\198\000\042\000\198\000\043\000\198\000\
\\044\000\198\000\000\000\
\\001\000\001\000\199\000\005\000\199\000\007\000\199\000\009\000\199\000\
\\011\000\199\000\013\000\199\000\015\000\037\000\016\000\036\000\
\\017\000\035\000\018\000\034\000\025\000\199\000\026\000\199\000\
\\030\000\199\000\031\000\199\000\034\000\199\000\035\000\199\000\
\\037\000\199\000\038\000\199\000\042\000\199\000\043\000\199\000\
\\044\000\199\000\000\000\
\\001\000\001\000\200\000\005\000\200\000\007\000\200\000\009\000\200\000\
\\011\000\200\000\013\000\200\000\015\000\037\000\016\000\036\000\
\\017\000\035\000\018\000\034\000\025\000\200\000\026\000\200\000\
\\030\000\200\000\031\000\200\000\034\000\200\000\035\000\200\000\
\\037\000\200\000\038\000\200\000\042\000\200\000\043\000\200\000\
\\044\000\200\000\000\000\
\\001\000\001\000\201\000\005\000\201\000\007\000\201\000\009\000\201\000\
\\011\000\201\000\013\000\201\000\015\000\037\000\016\000\036\000\
\\017\000\035\000\018\000\034\000\025\000\201\000\026\000\201\000\
\\030\000\201\000\031\000\201\000\034\000\201\000\035\000\201\000\
\\037\000\201\000\038\000\201\000\042\000\201\000\043\000\201\000\
\\044\000\201\000\000\000\
\\001\000\001\000\202\000\005\000\202\000\007\000\202\000\009\000\202\000\
\\011\000\202\000\013\000\202\000\015\000\037\000\016\000\036\000\
\\017\000\035\000\018\000\034\000\025\000\202\000\026\000\202\000\
\\030\000\202\000\031\000\202\000\034\000\202\000\035\000\202\000\
\\037\000\202\000\038\000\202\000\042\000\202\000\043\000\202\000\
\\044\000\202\000\000\000\
\\001\000\002\000\024\000\003\000\023\000\004\000\022\000\008\000\021\000\
\\016\000\020\000\029\000\019\000\032\000\018\000\033\000\017\000\
\\036\000\016\000\040\000\015\000\041\000\014\000\000\000\
\\001\000\002\000\048\000\000\000\
\\001\000\002\000\076\000\000\000\
\\001\000\002\000\077\000\000\000\
\\001\000\002\000\078\000\000\000\
\\001\000\002\000\085\000\000\000\
\\001\000\002\000\088\000\000\000\
\\001\000\002\000\088\000\013\000\087\000\000\000\
\\001\000\002\000\114\000\012\000\113\000\028\000\112\000\000\000\
\\001\000\002\000\116\000\000\000\
\\001\000\002\000\119\000\000\000\
\\001\000\002\000\143\000\000\000\
\\001\000\002\000\149\000\000\000\
\\001\000\002\000\152\000\000\000\
\\001\000\006\000\095\000\027\000\094\000\000\000\
\\001\000\006\000\136\000\000\000\
\\001\000\006\000\147\000\019\000\146\000\000\000\
\\001\000\008\000\096\000\000\000\
\\001\000\009\000\082\000\000\000\
\\001\000\009\000\107\000\000\000\
\\001\000\009\000\133\000\000\000\
\\001\000\011\000\106\000\015\000\037\000\016\000\036\000\017\000\035\000\
\\018\000\034\000\019\000\033\000\020\000\032\000\021\000\031\000\
\\022\000\030\000\023\000\029\000\024\000\028\000\025\000\027\000\
\\026\000\026\000\000\000\
\\001\000\011\000\139\000\015\000\037\000\016\000\036\000\017\000\035\000\
\\018\000\034\000\019\000\033\000\020\000\032\000\021\000\031\000\
\\022\000\030\000\023\000\029\000\024\000\028\000\025\000\027\000\
\\026\000\026\000\000\000\
\\001\000\013\000\124\000\000\000\
\\001\000\013\000\144\000\000\000\
\\001\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\
\\030\000\081\000\000\000\
\\001\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\
\\034\000\120\000\000\000\
\\001\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\
\\035\000\080\000\000\000\
\\001\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\
\\035\000\150\000\000\000\
\\001\000\019\000\093\000\000\000\
\\001\000\019\000\105\000\000\000\
\\001\000\019\000\155\000\000\000\
\\001\000\027\000\079\000\000\000\
\\001\000\027\000\132\000\000\000\
\\001\000\037\000\074\000\000\000\
\\001\000\038\000\110\000\000\000\
\\001\000\039\000\130\000\000\000\
\\158\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\159\000\000\000\
\\160\000\000\000\
\\161\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\000\000\
\\165\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\168\000\027\000\025\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\
\\031\000\121\000\000\000\
\\173\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\174\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\175\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\176\000\000\000\
\\177\000\000\000\
\\178\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\179\000\000\000\
\\180\000\002\000\024\000\003\000\023\000\004\000\022\000\008\000\021\000\
\\016\000\020\000\029\000\019\000\032\000\018\000\033\000\017\000\
\\036\000\016\000\040\000\015\000\041\000\014\000\000\000\
\\181\000\000\000\
\\182\000\005\000\109\000\015\000\037\000\016\000\036\000\017\000\035\000\
\\018\000\034\000\019\000\033\000\020\000\032\000\021\000\031\000\
\\022\000\030\000\023\000\029\000\024\000\028\000\025\000\027\000\
\\026\000\026\000\000\000\
\\183\000\000\000\
\\184\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\185\000\000\000\
\\186\000\000\000\
\\187\000\005\000\104\000\000\000\
\\188\000\000\000\
\\189\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\190\000\000\000\
\\191\000\002\000\024\000\003\000\023\000\004\000\022\000\008\000\021\000\
\\016\000\020\000\029\000\019\000\032\000\018\000\033\000\017\000\
\\036\000\016\000\040\000\015\000\041\000\014\000\000\000\
\\192\000\000\000\
\\193\000\007\000\084\000\015\000\037\000\016\000\036\000\017\000\035\000\
\\018\000\034\000\019\000\033\000\020\000\032\000\021\000\031\000\
\\022\000\030\000\023\000\029\000\024\000\028\000\025\000\027\000\
\\026\000\026\000\000\000\
\\194\000\000\000\
\\195\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\000\000\
\\196\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\000\000\
\\203\000\000\000\
\\204\000\017\000\035\000\018\000\034\000\000\000\
\\205\000\017\000\035\000\018\000\034\000\000\000\
\\206\000\000\000\
\\207\000\000\000\
\\208\000\042\000\047\000\043\000\046\000\044\000\045\000\000\000\
\\209\000\000\000\
\\210\000\000\000\
\\211\000\044\000\045\000\000\000\
\\212\000\042\000\047\000\000\000\
\\213\000\000\000\
\\214\000\000\000\
\\215\000\000\000\
\\216\000\000\000\
\\217\000\000\000\
\\218\000\000\000\
\\219\000\002\000\119\000\000\000\
\\220\000\000\000\
\\221\000\005\000\135\000\000\000\
\\222\000\000\000\
\\223\000\000\000\
\\224\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\225\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\226\000\000\000\
\\227\000\000\000\
\\228\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\229\000\015\000\037\000\016\000\036\000\017\000\035\000\018\000\034\000\
\\019\000\033\000\020\000\032\000\021\000\031\000\022\000\030\000\
\\023\000\029\000\024\000\028\000\025\000\027\000\026\000\026\000\000\000\
\\230\000\000\000\
\\231\000\000\000\
\\232\000\000\000\
\\233\000\008\000\058\000\010\000\057\000\012\000\056\000\014\000\055\000\000\000\
\\233\000\010\000\102\000\014\000\055\000\000\000\
\\233\000\010\000\102\000\014\000\055\000\039\000\128\000\000\000\
\"
val actionRowNumbers =
"\007\000\050\000\049\000\053\000\
\\054\000\047\000\045\000\052\000\
\\051\000\046\000\048\000\044\000\
\\055\000\062\000\088\000\008\000\
\\007\000\007\000\007\000\077\000\
\\057\000\056\000\113\000\007\000\
\\007\000\007\000\007\000\007\000\
\\007\000\007\000\007\000\007\000\
\\007\000\007\000\007\000\007\000\
\\090\000\091\000\093\000\092\000\
\\106\000\041\000\088\000\009\000\
\\010\000\011\000\039\000\034\000\
\\032\000\083\000\025\000\079\000\
\\110\000\012\000\014\000\007\000\
\\066\000\064\000\082\000\081\000\
\\006\000\005\000\004\000\003\000\
\\002\000\001\000\087\000\086\000\
\\085\000\084\000\094\000\107\000\
\\077\000\089\000\036\000\021\000\
\\024\000\007\000\007\000\007\000\
\\076\000\078\000\007\000\114\000\
\\073\000\072\000\037\000\028\000\
\\026\000\068\000\042\000\015\000\
\\007\000\016\000\099\000\033\000\
\\060\000\058\000\079\000\111\000\
\\007\000\030\000\013\000\007\000\
\\115\000\065\000\067\000\007\000\
\\063\000\095\000\043\000\099\000\
\\096\000\104\000\040\000\027\000\
\\101\000\022\000\007\000\007\000\
\\080\000\029\000\071\000\073\000\
\\075\000\112\000\007\000\068\000\
\\018\000\031\000\007\000\023\000\
\\100\000\017\000\019\000\035\000\
\\059\000\114\000\074\000\070\000\
\\069\000\098\000\097\000\105\000\
\\007\000\020\000\101\000\103\000\
\\007\000\108\000\038\000\102\000\
\\061\000\007\000\109\000\000\000"
val gotoT =
"\
\\001\000\155\000\002\000\011\000\003\000\010\000\004\000\009\000\
\\005\000\008\000\006\000\007\000\007\000\006\000\008\000\005\000\
\\009\000\004\000\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\042\000\015\000\041\000\018\000\040\000\019\000\039\000\
\\025\000\038\000\026\000\037\000\030\000\036\000\000\000\
\\000\000\
\\002\000\047\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\048\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\049\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\051\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\022\000\050\000\000\000\
\\000\000\
\\000\000\
\\010\000\052\000\000\000\
\\002\000\057\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\058\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\059\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\060\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\061\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\062\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\063\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\064\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\065\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\066\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\067\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\068\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\069\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\025\000\070\000\000\000\
\\000\000\
\\018\000\071\000\000\000\
\\000\000\
\\000\000\
\\014\000\042\000\015\000\073\000\018\000\040\000\019\000\039\000\
\\025\000\038\000\026\000\037\000\030\000\036\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\081\000\000\000\
\\000\000\
\\000\000\
\\020\000\084\000\000\000\
\\002\000\087\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\089\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\016\000\088\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\051\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\022\000\090\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\095\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\096\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\097\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\098\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\010\000\099\000\000\000\
\\021\000\101\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\106\000\000\000\
\\000\000\
\\024\000\109\000\000\000\
\\002\000\113\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\027\000\116\000\028\000\115\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\120\000\000\000\
\\000\000\
\\002\000\121\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\020\000\123\000\000\000\
\\002\000\124\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\010\000\125\000\000\000\
\\000\000\
\\000\000\
\\002\000\127\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\116\000\028\000\129\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\029\000\132\000\000\000\
\\000\000\
\\002\000\135\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\002\000\136\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\138\000\000\000\
\\000\000\
\\000\000\
\\002\000\139\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\017\000\140\000\000\000\
\\000\000\
\\000\000\
\\002\000\143\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\000\000\
\\027\000\146\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\125\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\149\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\029\000\151\000\000\000\
\\000\000\
\\002\000\152\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\154\000\003\000\010\000\004\000\009\000\005\000\008\000\
\\006\000\007\000\007\000\006\000\008\000\005\000\009\000\004\000\
\\011\000\003\000\012\000\002\000\013\000\001\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 156
val numrules = 76
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | vardecl of unit ->  (A.decl)
 | tyfieldsTail of unit ->  (A.fielddata list)
 | tyfields of unit ->  (A.fielddata list)
 | tyfield of unit ->  (A.fielddata)
 | tydecls of unit ->  ({ name:S.symbol,ty:A.ty,pos:pos }  list)
 | tydecl of unit ->  ({ name:S.symbol,ty:A.ty,pos:pos } )
 | ty of unit ->  (A.ty)
 | sequenceTail of unit ->  ( ( A.exp * pos )  list)
 | sequenceExp of unit ->  ( ( A.exp * pos )  list)
 | recordTail of unit ->  ( ( S.symbol * A.exp * pos )  list)
 | recordField of unit ->  ( ( S.symbol * A.exp * pos ) )
 | fundecls of unit ->  (A.fundecldata list)
 | fundecl of unit ->  (A.fundecldata)
 | functionParamTail of unit ->  ( ( A.exp * pos )  list)
 | functionParam of unit ->  ( ( A.exp * pos )  list)
 | decls of unit ->  (A.decl list) | decl of unit ->  (A.decl)
 | sequence of unit ->  (A.exp) | record of unit ->  (A.exp)
 | mathexp of unit ->  (A.exp)
 | lvalueTail of unit ->  (lvaluePartSpec list)
 | lvalue of unit ->  (A.var) | functionCall of unit ->  (A.exp)
 | control of unit ->  (A.exp) | compexp of unit ->  (A.exp)
 | boolexp of unit ->  (A.exp) | assignment of unit ->  (A.exp)
 | array of unit ->  (A.exp) | exp of unit ->  (A.exp)
 | program of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 31) => true | (T 32) => true | (T 33) => true | (T 39) => true
 | (T 35) => true | (T 36) => true | (T 37) => true | (T 41) => true
 | (T 42) => true | (T 43) => true | (T 27) => true | (T 28) => true
 | (T 29) => true | (T 30) => true | (T 34) => true | (T 38) => true
 | (T 40) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 29))::
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "TIMES"
  | (T 17) => "DIVIDE"
  | (T 18) => "EQ"
  | (T 19) => "NEQ"
  | (T 20) => "LT"
  | (T 21) => "LE"
  | (T 22) => "GT"
  | (T 23) => "GE"
  | (T 24) => "AND"
  | (T 25) => "OR"
  | (T 26) => "ASSIGN"
  | (T 27) => "ARRAY"
  | (T 28) => "IF"
  | (T 29) => "THEN"
  | (T 30) => "ELSE"
  | (T 31) => "WHILE"
  | (T 32) => "FOR"
  | (T 33) => "TO"
  | (T 34) => "DO"
  | (T 35) => "LET"
  | (T 36) => "IN"
  | (T 37) => "END"
  | (T 38) => "OF"
  | (T 39) => "BREAK"
  | (T 40) => "NIL"
  | (T 41) => "FUNCTION"
  | (T 42) => "VAR"
  | (T 43) => "TYPE"
  | (T 44) => "UMINUS"
  | (T 45) => "LOWPREC"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39)
 $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32)
 $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25)
 $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18)
 $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11)
 $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ 
(T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.control control1, control1left, 
control1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (control as control1) = control1 ()
 in (control)
end)
 in ( LrTable.NT 1, ( result, control1left, control1right), rest671)

end
|  ( 2, ( ( _, ( MlyValue.assignment assignment1, assignment1left, 
assignment1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (assignment as assignment1) = assignment1 ()
 in (assignment)
end)
 in ( LrTable.NT 1, ( result, assignment1left, assignment1right), 
rest671)
end
|  ( 3, ( ( _, ( MlyValue.functionCall functionCall1, 
functionCall1left, functionCall1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  (functionCall as functionCall1
) = functionCall1 ()
 in (functionCall)
end)
 in ( LrTable.NT 1, ( result, functionCall1left, functionCall1right), 
rest671)
end
|  ( 4, ( ( _, ( MlyValue.array array1, array1left, array1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (array
 as array1) = array1 ()
 in (array)
end)
 in ( LrTable.NT 1, ( result, array1left, array1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.record record1, record1left, record1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
record as record1) = record1 ()
 in (record)
end)
 in ( LrTable.NT 1, ( result, record1left, record1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.sequence sequence1, sequence1left, 
sequence1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (sequence as sequence1) = sequence1 ()
 in (sequence)
end)
 in ( LrTable.NT 1, ( result, sequence1left, sequence1right), rest671)

end
|  ( 7, ( ( _, ( MlyValue.boolexp boolexp1, boolexp1left, 
boolexp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (boolexp as boolexp1) = boolexp1 ()
 in (boolexp)
end)
 in ( LrTable.NT 1, ( result, boolexp1left, boolexp1right), rest671)

end
|  ( 8, ( ( _, ( MlyValue.compexp compexp1, compexp1left, 
compexp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (compexp as compexp1) = compexp1 ()
 in (compexp)
end)
 in ( LrTable.NT 1, ( result, compexp1left, compexp1right), rest671)

end
|  ( 9, ( ( _, ( MlyValue.mathexp mathexp1, mathexp1left, 
mathexp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (mathexp as mathexp1) = mathexp1 ()
 in (mathexp)
end)
 in ( LrTable.NT 1, ( result, mathexp1left, mathexp1right), rest671)

end
|  ( 10, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (A.VarExp lvalue)
end)
 in ( LrTable.NT 1, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 11, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => (A.NilExp))
 in ( LrTable.NT 1, ( result, NIL1left, NIL1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.exp (fn _ => let val  (INT as INT1) = 
INT1 ()
 in (A.IntExp INT)
end)
 in ( LrTable.NT 1, ( result, INT1left, INT1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left)
, STRING1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp (STRING, STRINGleft))
end)
 in ( LrTable.NT 1, ( result, STRING1left, STRING1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.control (fn _ => let val  exp1
 = exp1 ()
 val  exp2 = exp2 ()
 in (makeIf (exp1, exp2, NONE, IFleft))
end)
 in ( LrTable.NT 6, ( result, IF1left, exp2right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.control (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (makeIf (exp1, exp2, SOME exp3, IFleft))
end)
 in ( LrTable.NT 6, ( result, IF1left, exp3right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.control (fn _ => let val  
exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.WhileExp { test = exp1
                                          , body = exp2
                                          , pos = WHILEleft}
)
end)
 in ( LrTable.NT 6, ( result, WHILE1left, exp2right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.control (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp { var = S.symbol ID
                                        , escape = ref true
                                        , lo = exp1
                                        , hi = exp2
                                        , body = exp3
                                        , pos = FORleft}
)
end)
 in ( LrTable.NT 6, ( result, FOR1left, exp3right), rest671)
end
|  ( 18, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.control (fn _ => (
A.BreakExp BREAKleft))
 in ( LrTable.NT 6, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 19, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.sequenceExp 
sequenceExp1, _, _)) :: _ :: ( _, ( MlyValue.decls decls1, _, _)) :: (
 _, ( _, (LETleft as LET1left), _)) :: rest671)) => let val  result = 
MlyValue.control (fn _ => let val  (decls as decls1) = decls1 ()
 val  (sequenceExp as sequenceExp1) = sequenceExp1 ()
 in (
A.LetExp { decls = decls
                                        , body = A.SeqExp sequenceExp
                                        , pos = LETleft}
)
end)
 in ( LrTable.NT 6, ( result, LET1left, END1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, (lvalueleft as lvalue1left), _)) :: rest671))
 => let val  result = MlyValue.assignment (fn _ => let val  (lvalue
 as lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.AssignExp { var = lvalue
                                           , exp = exp
                                           , pos = lvalueleft}
)
end)
 in ( LrTable.NT 3, ( result, lvalue1left, exp1right), rest671)
end
|  ( 21, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.functionParam functionParam1, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.functionCall (fn _ => let val  (ID as ID1) = ID1 ()
 val  (functionParam as functionParam1) = functionParam1 ()
 in (
A.CallExp { func = S.symbol ID
                                         , args = functionParam
                                         , pos = IDleft}
)
end)
 in ( LrTable.NT 7, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 22, ( rest671)) => let val  result = MlyValue.functionParam (fn _
 => (nil))
 in ( LrTable.NT 15, ( result, defaultPos, defaultPos), rest671)
end
|  ( 23, ( ( _, ( MlyValue.functionParamTail functionParamTail1, _, 
functionParamTail1right)) :: ( _, ( MlyValue.exp exp1, exp1left, _))
 :: rest671)) => let val  result = MlyValue.functionParam (fn _ => let
 val  (exp as exp1) = exp1 ()
 val  (functionParamTail as functionParamTail1) = functionParamTail1
 ()
 in ((exp,exp1left) :: functionParamTail)
end)
 in ( LrTable.NT 15, ( result, exp1left, functionParamTail1right), 
rest671)
end
|  ( 24, ( rest671)) => let val  result = MlyValue.functionParamTail
 (fn _ => (nil))
 in ( LrTable.NT 16, ( result, defaultPos, defaultPos), rest671)
end
|  ( 25, ( ( _, ( MlyValue.functionParamTail functionParamTail1, _, 
functionParamTail1right)) :: ( _, ( MlyValue.exp exp1, exp1left, _))
 :: ( _, ( _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.functionParamTail (fn _ => let val  (exp as exp1) = exp1 ()
 val  (functionParamTail as functionParamTail1) = functionParamTail1
 ()
 in ((exp,exp1left) :: functionParamTail)
end)
 in ( LrTable.NT 16, ( result, COMMA1left, functionParamTail1right), 
rest671)
end
|  ( 26, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft
 as ID1left), _)) :: rest671)) => let val  result = MlyValue.array (fn
 _ => let val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.ArrayExp { typ = S.symbol ID
                                          , size = exp1
                                          , init = exp2
                                          , pos = IDleft}
)
end)
 in ( LrTable.NT 2, ( result, ID1left, exp2right), rest671)
end
|  ( 27, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.recordTail 
recordTail1, _, _)) :: ( _, ( MlyValue.recordField recordField1, _, _)
) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let
 val  result = MlyValue.record (fn _ => let val  ID1 = ID1 ()
 val  (recordField as recordField1) = recordField1 ()
 val  (recordTail as recordTail1) = recordTail1 ()
 in (
A.RecordExp { fields = recordField::recordTail
                                           , typ = S.symbol ID1
                                           , pos = ID1left}
)
end)
 in ( LrTable.NT 11, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 28, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 ID1left, _)) :: rest671)) => let val  result = MlyValue.record (fn _
 => let val  ID1 = ID1 ()
 in (
A.RecordExp { fields = []
                                           , typ = S.symbol ID1
                                           , pos = ID1left}
)
end)
 in ( LrTable.NT 11, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 29, ( rest671)) => let val  result = MlyValue.recordTail (fn _ =>
 (nil))
 in ( LrTable.NT 20, ( result, defaultPos, defaultPos), rest671)
end
|  ( 30, ( ( _, ( MlyValue.recordTail recordTail1, _, recordTail1right
)) :: ( _, ( MlyValue.recordField recordField1, _, _)) :: ( _, ( _, 
COMMA1left, _)) :: rest671)) => let val  result = MlyValue.recordTail
 (fn _ => let val  (recordField as recordField1) = recordField1 ()
 val  (recordTail as recordTail1) = recordTail1 ()
 in (recordField :: recordTail)
end)
 in ( LrTable.NT 20, ( result, COMMA1left, recordTail1right), rest671)

end
|  ( 31, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.recordField (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in ((S.symbol ID, exp, IDleft))
end)
 in ( LrTable.NT 19, ( result, ID1left, exp1right), rest671)
end
|  ( 32, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.sequenceExp 
sequenceExp1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.sequence (fn _ => let val  (sequenceExp as 
sequenceExp1) = sequenceExp1 ()
 in (makeSeqExp sequenceExp)
end)
 in ( LrTable.NT 12, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 33, ( rest671)) => let val  result = MlyValue.sequenceExp (fn _
 => (nil))
 in ( LrTable.NT 21, ( result, defaultPos, defaultPos), rest671)
end
|  ( 34, ( ( _, ( MlyValue.sequenceTail sequenceTail1, _, 
sequenceTail1right)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: 
rest671)) => let val  result = MlyValue.sequenceExp (fn _ => let val 
 (exp as exp1) = exp1 ()
 val  (sequenceTail as sequenceTail1) = sequenceTail1 ()
 in ((exp,exp1left) :: sequenceTail)
end)
 in ( LrTable.NT 21, ( result, exp1left, sequenceTail1right), rest671)

end
|  ( 35, ( rest671)) => let val  result = MlyValue.sequenceTail (fn _
 => (nil))
 in ( LrTable.NT 22, ( result, defaultPos, defaultPos), rest671)
end
|  ( 36, ( ( _, ( MlyValue.sequenceTail sequenceTail1, _, 
sequenceTail1right)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: ( _
, ( _, SEMICOLON1left, _)) :: rest671)) => let val  result = 
MlyValue.sequenceTail (fn _ => let val  (exp as exp1) = exp1 ()
 val  (sequenceTail as sequenceTail1) = sequenceTail1 ()
 in ((exp,exp1left) :: sequenceTail)
end)
 in ( LrTable.NT 22, ( result, SEMICOLON1left, sequenceTail1right), 
rest671)
end
|  ( 37, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.boolexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeIf (exp1, exp2, SOME (A.IntExp 0), exp1left))
end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.boolexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeIf (exp1, A.IntExp 1, SOME exp2, exp1left))
end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.compexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop (exp1, A.EqOp, exp2, exp1left))
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.compexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop (exp1, A.NeqOp, exp2, exp1left))
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.compexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop (exp1, A.LtOp, exp2, exp1left))
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.compexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop (exp1, A.LeOp, exp2, exp1left))
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.compexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop (exp1, A.GtOp, exp2, exp1left))
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.compexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop (exp1, A.GeOp, exp2, exp1left))
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.mathexp (fn _ => let val  (exp as exp1) = exp1 ()
 in (
makeBinop ( A.IntExp 0
                                         , A.MinusOp
                                         , exp
                                         , MINUSleft)
)
end)
 in ( LrTable.NT 10, ( result, MINUS1left, exp1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.mathexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
makeBinop ( exp1
                                         , A.PlusOp
                                         , exp2
                                         , exp1left)
)
end)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.mathexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
makeBinop ( exp1
                                         , A.MinusOp
                                         , exp2
                                         , exp1left)
)
end)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.mathexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
makeBinop ( exp1
                                         , A.TimesOp
                                         , exp2
                                         , exp1left)
)
end)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.mathexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
makeBinop ( exp1
                                         , A.DivideOp
                                         , exp2
                                         , exp1left)
)
end)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 50, ( rest671)) => let val  result = MlyValue.decls (fn _ => (nil
))
 in ( LrTable.NT 14, ( result, defaultPos, defaultPos), rest671)
end
|  ( 51, ( ( _, ( MlyValue.decls decls1, _, decls1right)) :: ( _, ( 
MlyValue.decl decl1, decl1left, _)) :: rest671)) => let val  result = 
MlyValue.decls (fn _ => let val  (decl as decl1) = decl1 ()
 val  (decls as decls1) = decls1 ()
 in (decl :: decls)
end)
 in ( LrTable.NT 14, ( result, decl1left, decls1right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.vardecl vardecl1, vardecl1left, 
vardecl1right)) :: rest671)) => let val  result = MlyValue.decl (fn _
 => let val  (vardecl as vardecl1) = vardecl1 ()
 in (vardecl)
end)
 in ( LrTable.NT 13, ( result, vardecl1left, vardecl1right), rest671)

end
|  ( 53, ( ( _, ( MlyValue.tydecls tydecls1, tydecls1left, 
tydecls1right)) :: rest671)) => let val  result = MlyValue.decl (fn _
 => let val  (tydecls as tydecls1) = tydecls1 ()
 in (A.TypeDec tydecls)
end)
 in ( LrTable.NT 13, ( result, tydecls1left, tydecls1right), rest671)

end
|  ( 54, ( ( _, ( MlyValue.fundecls fundecls1, fundecls1left, 
fundecls1right)) :: rest671)) => let val  result = MlyValue.decl (fn _
 => let val  (fundecls as fundecls1) = fundecls1 ()
 in (A.FunctionDec fundecls)
end)
 in ( LrTable.NT 13, ( result, fundecls1left, fundecls1right), rest671
)
end
|  ( 55, ( ( _, ( MlyValue.tydecl tydecl1, tydecl1left, tydecl1right))
 :: rest671)) => let val  result = MlyValue.tydecls (fn _ => let val 
 (tydecl as tydecl1) = tydecl1 ()
 in ([tydecl])
end)
 in ( LrTable.NT 25, ( result, tydecl1left, tydecl1right), rest671)

end
|  ( 56, ( ( _, ( MlyValue.tydecl tydecl1, _, tydecl1right)) :: ( _, (
 MlyValue.tydecls tydecls1, tydecls1left, _)) :: rest671)) => let val 
 result = MlyValue.tydecls (fn _ => let val  (tydecls as tydecls1) = 
tydecls1 ()
 val  (tydecl as tydecl1) = tydecl1 ()
 in (tydecls @ [tydecl])
end)
 in ( LrTable.NT 25, ( result, tydecls1left, tydecl1right), rest671)

end
|  ( 57, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.tydecl (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in (
{ name = S.symbol ID
                              , ty = ty
                              , pos = TYPEleft}
)
end)
 in ( LrTable.NT 24, ( result, TYPE1left, ty1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ID as 
ID1) = ID1 ()
 in (A.NameTy (S.symbol ID, IDleft))
end)
 in ( LrTable.NT 23, ( result, ID1left, ID1right), rest671)
end
|  ( 59, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  (tyfields as tyfields1) =
 tyfields1 ()
 in (A.RecordTy tyfields)
end)
 in ( LrTable.NT 23, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 60, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, (
ARRAYleft as ARRAY1left), _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy (S.symbol ID, ARRAYleft))
end)
 in ( LrTable.NT 23, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 61, ( rest671)) => let val  result = MlyValue.tyfields (fn _ => (
nil))
 in ( LrTable.NT 27, ( result, defaultPos, defaultPos), rest671)
end
|  ( 62, ( ( _, ( MlyValue.tyfieldsTail tyfieldsTail1, _, 
tyfieldsTail1right)) :: ( _, ( MlyValue.tyfield tyfield1, tyfield1left
, _)) :: rest671)) => let val  result = MlyValue.tyfields (fn _ => let
 val  (tyfield as tyfield1) = tyfield1 ()
 val  (tyfieldsTail as tyfieldsTail1) = tyfieldsTail1 ()
 in (tyfield :: tyfieldsTail)
end)
 in ( LrTable.NT 27, ( result, tyfield1left, tyfieldsTail1right), 
rest671)
end
|  ( 63, ( rest671)) => let val  result = MlyValue.tyfieldsTail (fn _
 => (nil))
 in ( LrTable.NT 28, ( result, defaultPos, defaultPos), rest671)
end
|  ( 64, ( ( _, ( MlyValue.tyfieldsTail tyfieldsTail1, _, 
tyfieldsTail1right)) :: ( _, ( MlyValue.tyfield tyfield1, _, _)) :: (
 _, ( _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfieldsTail (fn _ => let val  (tyfield as tyfield1) = 
tyfield1 ()
 val  (tyfieldsTail as tyfieldsTail1) = tyfieldsTail1 ()
 in (tyfield :: tyfieldsTail)
end)
 in ( LrTable.NT 28, ( result, COMMA1left, tyfieldsTail1right), 
rest671)
end
|  ( 65, ( ( _, ( MlyValue.ID ID2, ID2left, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfield (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in (
{ name = S.symbol ID1
                               , escape = ref true
                               , typ = (S.symbol ID2, ID2left)
                               , pos = ID1left}
)
end)
 in ( LrTable.NT 26, ( result, ID1left, ID2right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.vardecl (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
makeVarDec ( S.symbol ID
                                          , NONE
                                          , exp
                                          , VARleft)
)
end)
 in ( LrTable.NT 29, ( result, VAR1left, exp1right), rest671)
end
|  ( 67, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.vardecl (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
makeVarDec ( S.symbol ID1
                                          , SOME (S.symbol ID2, ID2left)
                                          , exp
                                          , VARleft)
)
end)
 in ( LrTable.NT 29, ( result, VAR1left, exp1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.fundecl fundecl1, fundecl1left, 
fundecl1right)) :: rest671)) => let val  result = MlyValue.fundecls
 (fn _ => let val  (fundecl as fundecl1) = fundecl1 ()
 in ([fundecl])
end)
 in ( LrTable.NT 18, ( result, fundecl1left, fundecl1right), rest671)

end
|  ( 69, ( ( _, ( MlyValue.fundecl fundecl1, _, fundecl1right)) :: ( _
, ( MlyValue.fundecls fundecls1, fundecls1left, _)) :: rest671)) =>
 let val  result = MlyValue.fundecls (fn _ => let val  (fundecls as 
fundecls1) = fundecls1 ()
 val  (fundecl as fundecl1) = fundecl1 ()
 in (fundecls @ [fundecl])
end)
 in ( LrTable.NT 18, ( result, fundecls1left, fundecl1right), rest671)

end
|  ( 70, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.tyfields tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 _, _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671))
 => let val  result = MlyValue.fundecl (fn _ => let val  (ID as ID1) =
 ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  (exp as exp1) = exp1 ()
 in (
makeFundecl ( S.symbol ID
                                           , tyfields
                                           , NONE
                                           , exp
                                           , FUNCTIONleft)
)
end)
 in ( LrTable.NT 17, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 71, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _,
 (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result
 = MlyValue.fundecl (fn _ => let val  ID1 = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
makeFundecl ( S.symbol ID1
                                           , tyfields
                                           , SOME (S.symbol ID2, ID2left)
                                           , exp
                                           , FUNCTIONleft)
)
end)
 in ( LrTable.NT 17, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 72, ( ( _, ( MlyValue.lvalueTail lvalueTail1, _, lvalueTail1right
)) :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) =>
 let val  result = MlyValue.lvalue (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (lvalueTail as lvalueTail1) = lvalueTail1 ()
 in (
makeLvaluePartSpec ( A.SimpleVar (S.symbol ID
                                                                , IDleft)
                                                  , IDleft
                                                  , lvalueTail)
)
end)
 in ( LrTable.NT 8, ( result, ID1left, lvalueTail1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.lvalueTail lvalueTail1, _, lvalueTail1right
)) :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, DOT1left, _)) :: 
rest671)) => let val  result = MlyValue.lvalueTail (fn _ => let val  (
ID as ID1) = ID1 ()
 val  (lvalueTail as lvalueTail1) = lvalueTail1 ()
 in (Field (S.symbol ID) :: lvalueTail)
end)
 in ( LrTable.NT 9, ( result, DOT1left, lvalueTail1right), rest671)

end
|  ( 74, ( ( _, ( MlyValue.lvalueTail lvalueTail1, _, lvalueTail1right
)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, LBRACK1left,
 _)) :: rest671)) => let val  result = MlyValue.lvalueTail (fn _ =>
 let val  (exp as exp1) = exp1 ()
 val  (lvalueTail as lvalueTail1) = lvalueTail1 ()
 in (Subscript exp :: lvalueTail)
end)
 in ( LrTable.NT 9, ( result, LBRACK1left, lvalueTail1right), rest671)

end
|  ( 75, ( rest671)) => let val  result = MlyValue.lvalueTail (fn _ =>
 (nil))
 in ( LrTable.NT 9, ( result, defaultPos, defaultPos), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun LOWPREC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
end
end
