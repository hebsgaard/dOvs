structure A = Absyn
structure S = Symbol

(* [these functions and similar ones may be convenient
 * for the creation of abstract syntax trees] *)

datatype lvaluePartSpec = Field of S.symbol
                        | Subscript of A.exp

fun makeLvaluePartSpec (v, pos, l::r) =
  (case l
    of Field idsym =>
       makeLvaluePartSpec (A.FieldVar (v, idsym, pos), pos, r)
     | Subscript exp =>
       makeLvaluePartSpec (A.SubscriptVar (v, exp, pos), pos,r))
  | makeLvaluePartSpec (v, _, nil) = v

fun makeBinop (e1, bop, e2, p) =
    A.OpExp  { left = e1
             , oper = bop
             , right = e2
             , pos = p}

fun makeIf (et, en, el, p) =
    A.IfExp  { test = et
             , thn = en
             , els = el
             , pos = p}

fun makeVarDec (idsym, ty, e, p) =
    A.VarDec { name = idsym
             , escape = ref true
             , typ = ty
             , init = e
             , pos = p}

fun makeFundecl (idsym, ps, rty, e, p) =
             { name = idsym
             , params = ps
             , result = rty
             , body = e
             , pos = p} : A.fundecldata

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE 
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL 
  | FUNCTION | VAR | TYPE
  | UMINUS
  | LOWPREC



(* [add missing nonterminals; in second phase: add semantic values] *)

%nonterm program 	      	of A.exp
	 | exp				of A.exp
	 | array				of A.exp
	 | arithmetic 			of A.exp	
	 | assignment			of A.exp	
	 | booleanOp			of A.exp
	 | breaky				of A.exp
	 | comparisonExp		of A.exp
	 | dec				of A.decl		
	 | decs     			of A.decl list		
   	 | fors				of A.exp
	 | fundec				of A.fundecldata
	 | fundecs 			of A.fundecldata list
	 | functionCall			of A.exp	
	 | functionBody		of (A.exp * pos) list
	 | functionTail		   	of (A.exp * pos) list
	 | ifthenelse			of A.exp		
	 | ifthen			   	of A.exp
	 | letInEnd			of A.exp	
	 | lvalue				of A.var
	 | lvalueTail			of lvaluePartSpec list
	 | parantheses			of A.exp
	 | recordCreate		of A.exp	
	 | recordCreBody	   	of (S.symbol * A.exp * pos)
	 | recordCreTail		of (S.symbol * A.exp * pos) list
	 | sequences			of A.exp
	 | subSeq				of (A.exp * pos) list
	 | subSeqTail			of (A.exp * pos) list
	 | tydec				of {name: S.symbol, ty: A.ty, pos: pos}
	 | tydecs				of {name: S.symbol, ty: A.ty, pos: pos} list
	 | tyfield				of A.fielddata
	 | tyfields				of A.fielddata list
	 | tyfieldTail		 	of A.fielddata list
	 | ty					of A.ty
	 | vardec				of A.decl
	 | whiles				of A.exp		

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION
         VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* [specify precedence/associativity, least tight binding first] *)

%nonassoc    LOWPREC
%nonassoc    FUNCTION VAR TYPE THEN DO OF ASSIGN
%right	      ELSE
%left	      OR
%left	      AND
%nonassoc    EQ NEQ GE GT LE LT
%left	      PLUS MINUS
%left	      TIMES DIVIDE
%left	      UMINUS

%%

(* ------------ Top level constructs --------------*)

program: exp							(exp)

exp: INT								(A.IntExp(INT))
     | STRING							(A.StringExp(STRING, STRINGleft))
     | NIL								(A.NilExp)
     | arithmetic						(arithmetic)
     | array							(array)
     | letInEnd							(letInEnd)
     | comparisonExp					(comparisonExp)
     | ifthenelse							(ifthenelse)
     | ifthen							(ifthen)
     | whiles							(whiles)
     | fors								(fors)
     | breaky							(breaky)
     | lvalue							(Absyn.VarExp lvalue)
     | sequences						(sequences)
     | booleanOp						(booleanOp)
     | recordCreate						(recordCreate)
     | assignment						(assignment)
     | functionCall						(functionCall)

(* -------------- DECLARATIONS ------------------ *)

decs: (* Epsilon-string *)					([])
      | dec decs							(decs @ [dec])

dec: vardec							(vardec)
     | tydecs       %prec LOWPREC			(A.TypeDec(tydecs))
     | fundecs	%prec LOWPREC			(A.FunctionDec(fundecs))

(* ---------------- DATA-TYPES -------------------- *)

tydec: TYPE ID EQ ty					({name = S.symbol ID, ty = ty, pos = TYPEleft})

tydecs: tydec  	  					([tydec]) 
	| tydecs tydec						(tydecs @ [tydec])

ty: ID	  							(A.NameTy(S.symbol ID, IDleft))
    | LBRACE tyfields RBRACE				(A.RecordTy(tyfields))
    | ARRAY OF ID    						(A.ArrayTy(S.symbol ID, ARRAYleft))

tyfield: ID COLON ID					({name = S.symbol ID1, escape = ref true, typ = (S.symbol ID2, ID2left), pos = ID1left})

tyfields: (* Epsilon-string *)				([])
	  | tyfield tyfieldTail					([tyfield] @ tyfieldTail)

tyfieldTail: (* Epsilon-string *)				([])
	     | COMMA tyfield tyfieldTail			([tyfield] @ tyfieldTail)

(* ---------------- VARIABLES -------------------- *)

vardec: VAR ID ASSIGN exp				(makeVarDec(S.symbol ID, NONE, exp, VARleft))
	| VAR ID COLON ID ASSIGN exp		(makeVarDec(S.symbol ID1, SOME(S.symbol ID2, ID2left), exp, VARleft))

(* ---------------- FUNCTIONS -------------------- *)

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp  (makeFundecl(S.symbol ID, tyfields, NONE, exp, FUNCTIONleft))
	| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
	(makeFundecl(S.symbol ID1, tyfields, SOME(S.symbol ID2, ID2left), exp, FUNCTIONleft))

fundecs: fundec      	     	      	     	      	([fundec])
	 | fundecs fundec					(fundecs @ [fundec])

(* -------------- SCOPE-RULES ------------------ *)

letInEnd: LET decs IN subSeq END		 	(A.LetExp{decls = decs, body = A.SeqExp(subSeq), pos = LETleft})

(* ----- VARIABLES AND EXPRESSIONS ------ *)

lvalue: ID	lvalueTail						(makeLvaluePartSpec(A.SimpleVar(S.symbol ID, IDleft), IDleft, lvalueTail))


lvalueTail: (* Epsilon-string  *)				([])
	    | DOT ID lvalueTail				(Field(S.symbol ID) :: lvalueTail)
	    | LBRACK exp RBRACK lvalueTail		(Subscript exp :: lvalueTail)

(* ---------------- EXPRESSIONS ----------------- *)

assignment: lvalue ASSIGN exp			(A.AssignExp{var = lvalue, exp = exp, pos = lvalueleft})

sequences: LPAREN subSeq RPAREN		(A.SeqExp(subSeq))

subSeq: (* Epsilon-string *)				([])
	| exp subSeqTail					([(exp, expleft)] @ subSeqTail)

subSeqTail: (* Epsilon-string *)			([])
	    | SEMICOLON exp subSeqTail		([(exp, expleft)] @ subSeqTail)

functionCall: ID LPAREN functionBody RPAREN (A.CallExp{func = S.symbol ID, args = functionBody, pos = IDleft})

 functionBody: (* Epsilon-string *)			([])
	      | exp functionTail				((exp, expleft) :: functionTail)

functionTail: (* Epsilon-string *)			([])
	      | COMMA exp functionTail			((exp, expleft) :: functionTail)

arithmetic: exp PLUS exp				(makeBinop(exp1, A.PlusOp, exp2, exp1left))
	 | exp MINUS exp					(makeBinop(exp1, A.MinusOp, exp2, exp1left))
	 | exp TIMES exp					(makeBinop(exp1, A.TimesOp, exp2, exp1left))
	 | exp DIVIDE exp					(makeBinop(exp1, A.DivideOp, exp2, exp1left))
	 | MINUS exp %prec UMINUS			(makeBinop(A.IntExp(0), A.MinusOp, exp, MINUSleft))

comparisonExp: exp EQ exp				(makeBinop(exp1, A.EqOp, exp2, exp1left))
	       | exp NEQ exp					(makeBinop(exp1, A.NeqOp, exp2, exp1left))
	       | exp LT exp					(makeBinop(exp1, A.LtOp, exp2, exp1left))
	       | exp LE exp					(makeBinop(exp1, A.LeOp, exp2, exp1left))
	       | exp GT exp					(makeBinop(exp1, A.GtOp, exp2, exp1left))
	       | exp GE exp					(makeBinop(exp1, A.GeOp, exp2, exp1left))

booleanOp: exp AND exp				(makeIf(exp1, exp2, SOME(A.IntExp(0)), exp1left))
	   | exp OR exp						(makeIf(exp1, A.IntExp(1), SOME(exp2), exp1left))

recordCreBody: ID EQ exp	 			((S.symbol ID, exp, IDleft))

recordCreate: ID LBRACE RBRACE 		       	 	      	  (A.RecordExp {fields = [], typ = S.symbol ID, pos = IDleft})
	      | ID LBRACE recordCreBody recordCreTail RBRACE (A.RecordExp{fields = [recordCreBody] @ recordCreTail, typ = S.symbol ID, pos = IDleft})

recordCreTail: (* Epsilon-string *)			([])
	       | COMMA recordCreBody recordCreTail	([recordCreBody] @ recordCreTail)

array: ID LBRACK exp RBRACK OF exp     	(A.ArrayExp{typ =S.symbol ID, size = exp1, init = exp2, pos = IDleft})

ifthenelse: IF exp THEN exp ELSE exp		(makeIf(exp1, exp2, SOME(exp3), IFleft))
ifthen: IF exp THEN exp					(makeIf(exp1, exp2, NONE, IFleft))
whiles: WHILE exp DO exp				(A.WhileExp{test = exp1, body = exp2, pos = WHILEleft})
fors: FOR ID ASSIGN exp TO exp DO exp	(A.ForExp{var = S.symbol ID, escape = ref true, lo = exp1, hi = exp2, body = exp3, pos = FORleft})
breaky: BREAK						(A.BreakExp BREAKleft)

